from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
import asyncio
import json
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

if not BOT_TOKEN or not WEATHER_API_KEY:
    raise ValueError("–ü–∏—à–∏ .env")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()

class UserStates(StatesGroup):
    waiting_for_city = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_favorite_cities():
    try:
        with open('favorite_cities.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_favorite_cities(cities):
    with open('favorite_cities.json', 'w') as file:
        json.dump(cities, file)

favorite_cities = load_favorite_cities()

def get_weather(city):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city},RU&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()
        
        if response.status_code == 200:
            weather_desc = data['weather'][0]['description']
            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']
            
            return (f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                   f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                   f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                   f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                   f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                   f"‚òÅÔ∏è {weather_desc.capitalize()}")
        else:
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã"

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥']
    keyboard.add(*buttons)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message_handler(text='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
async def weather_command(message: types.Message):
    await UserStates.waiting_for_city.set()
    await message.reply("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

@dp.message_handler(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥')
async def set_favorite_city(message: types.Message):
    await UserStates.waiting_for_city.set()
    await message.reply("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")

@dp.message_handler(state=UserStates.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    city = message.text
    weather = get_weather(city)
    
    if "–û—à–∏–±–∫–∞" not in weather and "–Ω–µ –Ω–∞–π–¥–µ–Ω" not in weather:
        user_id = str(message.from_user.id)
        favorite_cities[user_id] = city
        save_favorite_cities(favorite_cities)
        await message.answer(f"–ì–æ—Ä–æ–¥ {city} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã–π!\n\n{weather}")
    else:
        await message.answer(weather)
    
    await state.finish()

async def send_daily_weather():
    for user_id, city in favorite_cities.items():
        weather = get_weather(city)
        try:
            await bot.send_message(int(user_id), f"–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{weather}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def schedule_jobs():
    scheduler.add_job(send_daily_weather, 'cron', hour=8, minute=0)

if __name__ == '__main__':
    scheduler.start()
    schedule_jobs()
    executor.start_polling(dp, skip_updates=True) 